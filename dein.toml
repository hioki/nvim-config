[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make -f make_mac.mak'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
let g:deoplete#max_menu_width = 180

let g:go_bin_path = $HOME."/go/bin"
'''

[[plugins]]
repo = 'Shougo/neosnippet'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
depends = 'neosnippet'
hook_add = '''
let g:neocomplcache_snippets_dir = '~/.config/nvim/snippets'
let g:neosnippet#snippets_directory = '~/.config/nvim/snippets'
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
imap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  call denite#custom#var('grep', 'command', ['rg'])

  nnoremap <silent><buffer><expr> <CR>
  \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> d
  \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p
  \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> i
  \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space>
  \ denite#do_map('toggle_select').'j'
  nnoremap <silent><buffer><expr> *
  \ denite#do_map('toggle_select_all').'j'
endfunction
'''

[[plugins]]
repo = 'Shougo/unite.vim'
hook_add = '''
autocmd FileType unite nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
autocmd FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>
autocmd FileType unite nnoremap <silent> <buffer> <C-g> :q<CR>
autocmd FileType unite inoremap <silent> <buffer> <C-g> <ESC>:q<CR>
'''

[[plugins]]
repo = 'Shougo/vimfiler.vim'
depends = 'unite.vim'
hook_add = '''
call vimfiler#custom#profile('default', 'context', {
      \ 'safe' : 0,
      \ 'auto_expand' : 1,
      \ 'parent' : 0,
      \ })
let g:vimfiler_as_default_explorer = 1
let g:vimfiler_tree_leaf_icon = ' '
let g:vimfiler_tree_opened_icon = '▾'
let g:vimfiler_tree_closed_icon = '▸'
let g:vimfiler_file_icon = '-'
let g:vimfiler_marked_file_icon = '*'
autocmd FileType vimfiler call s:vimfiler_my_settings()
function! s:vimfiler_my_settings()
  nnoremap <silent><buffer><expr> s vimfiler#do_switch_action('vsplit')
  nnoremap <silent><buffer><expr> v vimfiler#do_switch_action('split')
  nnoremap <silent><buffer><expr> t vimfiler#do_action('tabopen')
  nunmap <buffer> <C-l>
endfunction
nnoremap <silent> fe :<C-u>VimFilerBufferDir -quit<CR>
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
let g:quickrun_config = {
  \ "_" : {
  \   "runner" : "vimproc",
  \   "runner/vimproc/updatetime" : 60
  \ },
  \ 'ruby': {
  \   'command': 'ruby',
  \   'exec': ['%c %s']
  \ },
  \ 'python': {
  \   'command': 'python3',
  \   'exec': ['%c %s']
  \ },
  \ 'typescript': {
  \   'command': 'ts-node',
  \   'exec': ['%c %s']
  \ },
  \ 'rust': {
  \   'command': 'cargo',
  \   'exec': ['%c run --quiet %s']
  \ }}
'''

[[plugins]]
repo = 'cocopon/iceberg.vim'
hook_add = '''
au VimEnter * nested colorscheme iceberg
au VimEnter * highlight Visual ctermbg=16
'''

[[plugins]]
repo = 'thinca/vim-visualstar'

[[plugins]]
repo = 'jiangmiao/auto-pairs'

[[plugins]]
repo = 'tomtom/tcomment_vim'
hook_add = '''
let g:tcomment_opleader1 = 'gc'
'''

# textobj
[[plugins]]
repo = 'kana/vim-textobj-user'
[[plugins]]
repo = 'kana/vim-textobj-syntax'
[[plugins]]
repo = 'kana/vim-textobj-lastpat'
[[plugins]]
repo = 'kana/vim-textobj-indent'
[[plugins]]
repo = 'kana/vim-textobj-function'
[[plugins]]
repo = 'kana/vim-textobj-fold'
[[plugins]]
repo = 'kana/vim-textobj-entire'
[[plugins]]
repo = 'kana/vim-textobj-jabraces'

# operator
[[plugins]]
repo = 'vim-scripts/operator-user'
[[plugins]]
repo = 'vim-scripts/operator-replace'
[[plugins]]
repo = 'rhysd/vim-operator-surround'

[[plugins]]
repo = 'vim-scripts/camelcasemotion'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'tpope/vim-rhubarb'

[[plugins]]
repo = 'vim-scripts/vcscommand.vim'

[[plugins]]
repo = 'tpope/vim-abolish'

[[plugins]]
repo = 'tpope/vim-dispatch'

[[plugins]]
repo = 'h1mesuke/vim-alignta'

[[plugins]]
repo = 'junegunn/vim-easy-align'

[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo = 'nvim-lualine/lualine.nvim'

[[plugins]]
repo = 'sbdchd/neoformat'

[[plugins]]
repo = 'ap/vim-buftabline'

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
nnoremap <silent> T :<C-u>TagbarToggle<CR>
let g:tagbar_autofocus = 1
'''

[[plugins]]
repo = 'ekalinin/Dockerfile.vim'

[[plugins]]
repo = 'github/copilot.vim.git'

[[plugins]]
repo = 'Shougo/ddx.vim'
hook_add = '''
call ddx#custom#patch_global({'ui': 'hex'})
'''
